generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client" // Add output path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  password     String
  firstName    String
  lastName     String
  birthDate    DateTime?
  isAdmin      Boolean    @default(false)
  isSubscribed Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?  @db.Timestamp(6)
  documents    Document[]

  // Added blogPosts relationship
  blogPosts BlogPost[] @relation("UserBlogPosts")
}

model Document {
  id          Int      @id @default(autoincrement())
  fileName    String
  fileSize    Int
  fileType    String
  filePath    String
  userId      Int
  uploadDate  DateTime @default(now())
  isPublic    Boolean  @default(false)
  description String?
  user        User     @relation(fields: [userId], references: [id])
}

model BlogPost {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.Text
  slug        String   @unique
  authorId    Int
  publishDate DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)
  imageUrl    String?

  // Define the relation to the User model
  author User @relation("UserBlogPosts", fields: [authorId], references: [id])
}

model Newsletter {
  id             Int      @id @default(autoincrement())
  subject        String
  content        String
  sentDate       DateTime @default(now())
  recipientCount Int
}

model Tour {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  duration    Int
  price       Float
  location    String
  difficulty  String
  maxGroup    Int
  featured    Boolean   @default(false)
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  itinerary   TourDay[]
}

model TourDay {
  id            Int    @id @default(autoincrement())
  tourId        Int
  dayNumber     Int
  title         String
  description   String
  activities    String
  meals         String
  accommodation String
  tour          Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
